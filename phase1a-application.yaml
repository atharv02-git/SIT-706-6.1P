AWSTemplateFormatVersion: 2010-09-09
Description: Infrastructure stack for provisioning WordPress with RDS, ALB, and S3 integration

Parameters:
  NetworkStackName:
    Type: String
    Description: Reference to the networking stack

  AmazonLinuxAMIID:
    Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
    Default: /aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2

  ServerInstanceProfile:
    Type: String
    Default: LabInstanceProfile

##
## 2.1 Create a MySQL RDS
##

Resources:

  # ---------------------------
  # Database Configuration
  # ---------------------------
  
  DatabaseSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: "WordPress DB Subnet Group"
      SubnetIds:
        - Fn::ImportValue: !Sub "${NetworkStackName}-PrivateSubnet1ExportId"
        - Fn::ImportValue: !Sub "${NetworkStackName}-PrivateSubnet2ExportId"

  DatabaseSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow MySQL access from WordPress application
      VpcId: 
        Fn::ImportValue: !Sub "${NetworkStackName}-VPCID"
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 3306
          ToPort: 3306
          SourceSecurityGroupId:
            Fn::GetAtt:
              - WordpressServerSecurityGroup
              - GroupId
        - IpProtocol: tcp
          FromPort: 3306
          ToPort: 3306
          SourceSecurityGroupId:
            Fn::GetAtt:
              - AutoScaleWordpressServerSecurityGroup
              - GroupId

  DatabaseInstance:
    Type: AWS::RDS::DBInstance
    Properties:
      DBSubnetGroupName: !Ref DatabaseSubnetGroup
      DBInstanceClass: "db.t3.micro"
      DBName: "Wordpress"
      MasterUsername: "admin"
      MasterUserPassword: "atharv123" 
      AllocatedStorage: "20"
      MultiAZ: true
      Engine: "mysql"
      VPCSecurityGroups:
        - !Ref DatabaseSecurityGroup
      EngineVersion: "8.0.35"
      PubliclyAccessible: false

  ReadReplicaDatabaseInstance:
    Type: AWS::RDS::DBInstance
    Properties:
      SourceDBInstanceIdentifier: !Ref DatabaseInstance
      DBInstanceClass: "db.t3.micro"
      Engine: "mysql"
      MultiAZ: false
      PubliclyAccessible: false
      VPCSecurityGroups:
        - !Ref DatabaseSecurityGroup
      EngineVersion: "8.0.35"

## ---------------------------
## 2.2 Create and configuring an Application Load Balancer then placing it in both public subnet 1 and public subnet 2
## ---------------------------

  ALB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Scheme: internet-facing
      Subnets:
        - Fn::ImportValue: !Sub "${NetworkStackName}-PublicSubnet1ExportId"
        - Fn::ImportValue: !Sub "${NetworkStackName}-PublicSubnet2ExportId"
      SecurityGroups:
        - !Ref ALBSecurityGroup
      Type: application
      IpAddressType: ipv4

  ALBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "Security group for the ALB in-front of Wordpress"
      VpcId:
        Fn::ImportValue: !Sub "${NetworkStackName}-VPCID"
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0

  ALBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref ALBTargetGroup
      LoadBalancerArn: !Ref ALB
      Port: 80
      Protocol: HTTP

  ALBTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: Wordpress
      Port: 80
      Protocol: HTTP
      VpcId:
        Fn::ImportValue: !Sub "${NetworkStackName}-VPCID"


## ---------------------------
## 4 Create an S3 bucket with public access disabled for S3 Media Offload
## ---------------------------

  MediaOffloadBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: atharv-wordpress-media-offload

## ---------------------------
## 5 Launch the AMI server for the wordPress EC2 instance
## ---------------------------

  WordpressServerKeyPair:
    Type: AWS::EC2::KeyPair
    Properties:
      KeyName: WordpressServerKeyPair

  WordpressServerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow traffic from Internet
      VpcId:
        Fn::ImportValue: !Sub "${NetworkStackName}-VPCID"
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0

  WordpressServer:
    Type: AWS::EC2::Instance
    DependsOn: ["DatabaseInstance"]
    Properties:
      InstanceType: t2.micro
      ImageId: !Ref AmazonLinuxAMIID
      Tags:
        - Key: Name
          Value: WordpressServer
      KeyName: !Ref WordpressServerKeyPair
      SecurityGroupIds:
        - !Ref WordpressServerSecurityGroup
      IamInstanceProfile: !Ref ServerInstanceProfile
      SubnetId:
        Fn::ImportValue: !Sub "${NetworkStackName}-PublicSubnet2ExportId"
      UserData:
        Fn::Base64: |
          #!/bin/bash
          yum -y update
          yum -y install httpd mysql
          amazon-linux-extras install php7.4 -y
          wget http://wordpress.org/latest.tar.gz -P /tmp/
          tar zxvf /tmp/latest.tar.gz -C /tmp
          cp -r /tmp/wordpress/* /var/www/html/
          chown apache:apache -R /var/www/html
          yum install -y php php-xml # Added to fix issue with WP Offload App
          yum install -y php-gd # Added to fix issue with WP Offload App
          systemctl enable httpd.service
          systemctl start httpd.service

## ---------------------------
## Auto-scaling Wordpress server so that it can access RDS 
## ---------------------------

  AutoScaleWordpressServerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow traffic from LB
      VpcId:
        Fn::ImportValue: !Sub "${NetworkStackName}-VPCID"
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          SourceSecurityGroupId: !Ref ALBSecurityGroup

# ---------------------------
# Outputs
# ---------------------------

Outputs:

##
## Exporting the values so they can be accessed by the application autoscaling cloud formation.
##
  ALBSecurityGroupExportId:
    Value: !Ref ALBSecurityGroup
    Export:
      Name: !Sub "${AWS::StackName}-ALBSecurityGroup"

  WordpressServerKeyPairExportId:
    Value: !Ref WordpressServerKeyPair
    Export:
      Name: !Sub "${AWS::StackName}-WordpressServerKeyPair"

  ALBTargetGroupExportId:
    Value: !Ref ALBTargetGroup
    Export:
      Name: !Sub "${AWS::StackName}-ALBTargetGroup"

  AutoScaleWordpressServerSecurityGroupExportId:
    Value: !Ref AutoScaleWordpressServerSecurityGroup
    Export:
      Name: !Sub "${AWS::StackName}-AutoScaleWordpressServerSecurityGroup"